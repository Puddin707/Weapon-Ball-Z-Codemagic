workflows:
  wbz_ios_export_testflight:
    name: WBZ iOS Export → TestFlight
    max_build_duration: 120

    environment:
      groups:
        - app_store_connect  # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_ID, APP_STORE_CONNECT_PRIVATE_KEY (+APP_STORE_TEAM_ID)
      vars:
        XCODE_SCHEME: "Unity-iPhone"
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        APP_BUNDLE_ID: "com.galacticozstudio.weaponballz"
        CF_BUNDLE_SHORT_VERSION: "1.0"
        # APP_STORE_TEAM_ID: "ABCDEFGHIJ"   # Team ID 10 ký tự

    cache:
      cache_paths:
        - ~/.cocoapods
        - ios/Pods
        - Pods
        - ~/Library/Developer/Xcode/DerivedData

    scripts:
      - name: Detect iOS directory
        script: |
          set -euo pipefail
          IOS_DIR="."
          if [ -d "ios" ] && [ -f "ios/Unity-iPhone.xcodeproj/project.pbxproj" ]; then
            IOS_DIR="ios"
          fi
          echo "IOS_DIR=$IOS_DIR" | tee "$CM_BUILD_DIR/ios_dir.txt"
          echo "→ Using IOS_DIR=$IOS_DIR"

      - name: Kiểm tra cấu trúc iOS export
        script: |
          set -euo pipefail
          IOS_DIR=$(cut -d= -f2 "$CM_BUILD_DIR/ios_dir.txt")
          ls -la "$IOS_DIR"
          test -d "$IOS_DIR/Classes" || { echo "❌ Không thấy folder Classes trong $IOS_DIR (repo không phải iOS export?)"; exit 1; }
          [ -f "$IOS_DIR/Info.plist" ] || echo "⚠️ Không thấy $IOS_DIR/Info.plist — kiểm tra lại path nếu cần."

      - name: Cập nhật CFBundleShortVersion/CFBundleVersion
        script: |
          set -euo pipefail
          IOS_DIR=$(cut -d= -f2 "$CM_BUILD_DIR/ios_dir.txt")
          if [ -f "$IOS_DIR/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${CF_BUNDLE_SHORT_VERSION}" "$IOS_DIR/Info.plist" || /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string ${CF_BUNDLE_SHORT_VERSION}" "$IOS_DIR/Info.plist"
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUMBER}" "$IOS_DIR/Info.plist" || /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${BUILD_NUMBER}" "$IOS_DIR/Info.plist"
            echo "✅ Version=${CF_BUNDLE_SHORT_VERSION} Build=${BUILD_NUMBER}"
          fi

      - name: Fix CocoaPods specs (one-time cleanup)
        script: |
          set -euo pipefail
          if pod repo list 2>/dev/null | grep -q "/repos/master"; then
            echo "→ Removing deprecated 'master' specs repo…"
            pod repo remove master || true
            rm -rf ~/.cocoapods/repos/master || true
          else
            echo "→ No 'master' repo found. Skipping."
          fi

      - name: Install CocoaPods (cache-aware, fast)
        script: |
          set -euo pipefail
          IOS_DIR=$(cut -d= -f2 "$CM_BUILD_DIR/ios_dir.txt")

          command -v pod >/dev/null 2>&1 || sudo gem install cocoapods -v 1.15.2 --no-document
          echo "CocoaPods $(pod --version)"
          export COCOAPODS_DISABLE_STATS=1

          if [ -f "$IOS_DIR/Podfile" ]; then
            HASH_FILE="$CM_BUILD_DIR/pods.hash"
            if [ -f "$IOS_DIR/Podfile.lock" ]; then
              shasum -a 256 "$IOS_DIR/Podfile" "$IOS_DIR/Podfile.lock" | shasum -a 256 | awk '{print $1}' > "$HASH_FILE"
            else
              shasum -a 256 "$IOS_DIR/Podfile" | awk '{print $1}' > "$HASH_FILE"
            fi

            if [ -d "$IOS_DIR/Pods" ] && [ -f "$IOS_DIR/Pods/.pods.hash" ] && cmp -s "$HASH_FILE" "$IOS_DIR/Pods/.pods.hash"; then
              echo "✅ Pods cache valid → skip pod install"
            else
              echo "→ Installing pods in $IOS_DIR"
              if [ -f "$IOS_DIR/Podfile.lock" ]; then
                (cd "$IOS_DIR" && pod install --deployment) || (cd "$IOS_DIR" && pod install --repo-update)
              else
                (cd "$IOS_DIR" && pod install --repo-update)
              fi
              cp "$HASH_FILE" "$IOS_DIR/Pods/.pods.hash" || true
              echo "✅ CocoaPods done"
            fi
          else
            echo "ℹ️ Không có $IOS_DIR/Podfile — bỏ qua CocoaPods."
          fi

      # --- SIGNING (đÃ SỬA ĐÚNG CÚ PHÁP) ---
      - name: Fetch signing files from App Store Connect
        script: |
          set -euo pipefail
          keychain initialize
          # Lệnh đúng: không có --bundle-identifier/--output
          app-store-connect fetch-signing-files "$APP_BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create
          # Nếu team bạn chưa bật integration trong Codemagic, thêm 3 flag:
          #   --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
          #   --key-id "$APP_STORE_CONNECT_KEY_ID" \
          #   --private-key "$APP_STORE_CONNECT_PRIVATE_KEY"
          ls -la ~/Library/codemagic-cli-tools/profiles || true
          ls -la ~/Library/codemagic-cli-tools/certificates || true

      - name: Use provisioning profiles for Xcode project
        script: |
          set -euo pipefail
          IOS_DIR=$(cut -d= -f2 "$CM_BUILD_DIR/ios_dir.txt")
          # Import tất cả certs đã được fetch (CLI tự lấy đường dẫn mặc định)
          keychain add-certificates --password "${CERT_PASSWORD:-}"
          # Áp profile/cert vào project (tự tìm profile phù hợp bundle)
          xcode-project use-profiles --project "$IOS_DIR/Unity-iPhone.xcodeproj" || true
      # --- END SIGNING ---

      - name: Xcode Archive (raw log + xcpretty)
        script: |
          set -euo pipefail
          IOS_DIR=$(cut -d= -f2 "$CM_BUILD_DIR/ios_dir.txt")
          export NSUnbufferedIO=YES
          LOG_RAW="$CM_BUILD_DIR/xcodebuild-archive.raw.log"
          RESULT_BUNDLE="$CM_BUILD_DIR/ResultBundle.xcresult"

          TEAM_ARG=()
          if [ -n "${APP_STORE_TEAM_ID:-}" ]; then TEAM_ARG=(DEVELOPMENT_TEAM="${APP_STORE_TEAM_ID}"); else echo "⚠️ APP_STORE_TEAM_ID unset → dùng team theo profile."; fi
          BUNDLE_ARG=()
          if [ -n "${APP_BUNDLE_ID:-}" ]; then BUNDLE_ARG=(PRODUCT_BUNDLE_IDENTIFIER="${APP_BUNDLE_ID}"); fi

          if [ -f "$IOS_DIR/${XCODE_WORKSPACE}" ]; then
            echo "➡️ Build bằng workspace: $IOS_DIR/${XCODE_WORKSPACE}"
            (cd "$IOS_DIR" && xcodebuild \
              -workspace "${XCODE_WORKSPACE}" \
              -scheme "${XCODE_SCHEME}" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              "${TEAM_ARG[@]}" \
              "${BUNDLE_ARG[@]}" \
              -archivePath "$CM_BUILD_DIR/build.xcarchive" \
              -resultBundlePath "$RESULT_BUNDLE" \
              -allowProvisioningUpdates \
              -showBuildTimingSummary \
              clean archive) | tee "$LOG_RAW" | xcpretty --no-color || { echo "⛔️ Build failed. Last 200 lines:"; tail -n 200 "$LOG_RAW"; exit 1; }
          else
            echo "➡️ Không có workspace → build bằng project .xcodeproj"
            (cd "$IOS_DIR" && xcodebuild \
              -project "Unity-iPhone.xcodeproj" \
              -scheme "${XCODE_SCHEME}" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              "${TEAM_ARG[@]}" \
              "${BUNDLE_ARG[@]}" \
              -archivePath "$CM_BUILD_DIR/build.xcarchive" \
              -resultBundlePath "$RESULT_BUNDLE" \
              -allowProvisioningUpdates \
              -showBuildTimingSummary \
              clean archive) | tee "$LOG_RAW" | xcpretty --no-color || { echo "⛔️ Build failed. Last 200 lines:"; tail -n 200 "$LOG_RAW"; exit 1; }
          fi
          echo "✅ Archive done"

      - name: Export IPA (raw log)
        script: |
          set -euo pipefail
          LOG_EXPORT="$CM_BUILD_DIR/xcodebuild-export.raw.log"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/build.xcarchive" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$CM_BUILD_DIR/ipa" \
            -allowProvisioningUpdates \
            | tee "$LOG_EXPORT" | xcpretty --no-color || { echo "⛔️ Export failed. Last 200 lines:"; tail -n 200 "$LOG_EXPORT"; exit 1; }
          ls -la "$CM_BUILD_DIR/ipa"
          echo "✅ Export IPA done"

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/build.xcarchive
      - $CM_BUILD_DIR/ResultBundle.xcresult
      - $CM_BUILD_DIR/xcodebuild-archive.raw.log
      - $CM_BUILD_DIR/xcodebuild-export.raw.log
      - $CM_BUILD_DIR/pod_install.log
      - ExportOptions.plist
      - $HOME/Library/Logs/scan/*.log
      - $CM_BUILD_DIR/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_ID
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true


